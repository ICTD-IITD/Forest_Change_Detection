var kh = ee.FeatureCollection('projects/ee-eshan292/assets/pariveshtestarea2');


/*

function zonalStats(ic, fc, params) {
  // Initialize internal params dictionary.
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };

  // Replace initialized params with provided params.
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }

  // Set default parameters based on an image representative.
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;

  // Map the reduceRegions function over the image collection.
  var results = ic.map(function(img) {
    // Select bands (optionally rename), set a datetime & timestamp property.
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));

    // Define final image property dictionary to set in output features.
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);

    // Subset points that intersect the given image.
    var fcSub = fc.filterBounds(img.geometry());

    // Reduce the image by regions.
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    // Add metadata to each feature.
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));

  return results;
}



//var kh = ee.FeatureCollection('projects/ee-eshan292/assets/pariveshtestarea2');
//Map.addLayer(kh) ;
//Map.centerObject(kh.first()) ;
var kh = ee.FeatureCollection([geometry]) ;

var cloudMaskL457 = function(image) {
  var qa = image.select('pixel_qa');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
                  .and(qa.bitwiseAnd(1 << 7))
                  .or(qa.bitwiseAnd(1 << 3));
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};


//var bands = ['B1','B2', 'B3', 'B4', 'B5', 'B6','B7'] ;
var bands = ['B1'] ;

print(kh);
var tcc = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
      .filterBounds(kh)
      .filterDate('2018-1-1','2020-12-31')
      .filter(ee.Filter.lt('CLOUD_COVER',10))
      .map(cloudMaskL457)
      .select(bands)
      ;  
      
  print(tcc) ;    
//req = req.map(add_normalized_bands);
//var params = {bands : ['B1','B2', 'B3', 'B4', 'B5', 'B6','B7']};
var params = {bands : ['B1']};

Map.addLayer(tcc.first()) ;
Map.centerObject(tcc.first()) ;

var ptsTopoStats = zonalStats(tcc,kh,params);

print(ptsTopoStats) ;
Export.table.toDrive({
  collection: kh,
  description: 'exportTableExample',
  fileFormat: 'CSV'
});

*/




// create fc as table for script

var cloudMaskL457 = function(image) {
  var qa = image.select('pixel_qa');
  // If the cloud bit (5) is set and the cloud confidence (7) is high
  // or the cloud shadow bit is set (3), then it's a bad pixel.
  var cloud = qa.bitwiseAnd(1 << 5)
                  .and(qa.bitwiseAnd(1 << 7))
                  .or(qa.bitwiseAnd(1 << 3));
  // Remove edge pixels that don't occur in all bands
  var mask2 = image.mask().reduce(ee.Reducer.min());
  return image.updateMask(cloud.not()).updateMask(mask2);
};

function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}

function zonalStats(ic, fc, params) {
  // Initialize internal params dictionary.
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };

  // Replace initialized params with provided params.
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }

  // Set default parameters based on an image representative.
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;

  // Map the reduceRegions function over the image collection.
  var results = ic.map(function(img) {
    // Select bands (optionally rename), set a datetime & timestamp property.
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));

    // Define final image property dictionary to set in output features.
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);

    // Subset points that intersect the given image.
    var fcSub = fc.filterBounds(img.geometry());

    // Reduce the image by regions.
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    // Add metadata to each feature.
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));

  return results;
}

function add_normalized_bands(image){
  var ndvi = image.normalizedDifference(['B4', 'B3']).rename('NDVI'); //vegetaion index
  var ndwi = image.normalizedDifference(['B2', 'B4']).rename('NDWI'); //water index
  var ndbi = image.normalizedDifference(['B5', 'B4']).rename('NDBI'); //water index
  return image.addBands(ndvi).addBands(ndwi).addBands(ndbi);
}

var greenpixels = kh;

var year = ['2019'];

var bands = ['B1','B2', 'B3', 'B4', 'B5', 'B6','B7'];

var req = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
      .filterBounds(greenpixels)
      .filterDate('2001-01-01','2020-12-31')
      .filter(ee.Filter.lt('CLOUD_COVER',10))
      .map(cloudMaskL457)
      .select(bands)
      ;  
      
var tcc = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
      .filterBounds(greenpixels)
      .filterDate('2001-01-01','2020-12-31')
      .filter(ee.Filter.lt('CLOUD_COVER',10))
      .map(cloudMaskL457)
      .select(bands)
      ;  

//print(req);
req = req.map(add_normalized_bands);
var params = {bands : ['B1','B2', 'B3', 'B4', 'B5', 'B6','B7','NDVI','NDBI','NDWI']};
var ptsTopoStats = zonalStats(req,greenpixels,params);
var req = ['B1','B2', 'B3', 'B4', 'B5', 'B6','B7','NDVI','NDBI','NDWI','SENSING_TIME','osm_id','timestamp'];
var final = ptsTopoStats.select(req);
//print(ptsTopoStats)
Export.table.toDrive({
  collection : final,
  folder : 'Landsat7_time_series',
  fileFormat : 'CSV'
})



//Creating a merged fc 
/*
var fc1 = ee.FeatureCollection('projects/finalgroundtruth/assets/511261271216WXHJ3SouthAndamanSide');
var fc2 = ee.FeatureCollection('projects/finalgroundtruth/assets/51126123812130QIG8Kadamtalaside');
var fc5 = ee.FeatureCollection('projects/finalgroundtruth/assets/4112012431218GXB0QVETAGANIVALASA_TO_TANGALAM_ROAD');
var fc6 = ee.FeatureCollection('projects/finalgroundtruth/assets/61123122412129G8CZMutukudubit2');
var fc9 = ee.FeatureCollection('projects/finalgroundtruth/assets/61123122412129G8CZMutukudubit2');

var fc50merged = ee.FeatureCollection('projects/finalgroundtruth/assets/merged50');

//var mergedfc = fc1.merge(fc2) ;
//var list = [fc1,fc2, fc3, fc4, fc5, fc6,fc7,fc8,fc9,fc10,fc11] ;
var list = [fc50merged] ;
var mergedfc = ee.FeatureCollection(list).flatten();
print(mergedfc)

Export.table.toDrive({
  collection : mergedfc,
  folder : 'GroundTruth',
  fileFormat : 'CSV'
})

/*




/*








//Time Series map generation


  
// import the tcc dataseries
var tcc1 = ee.ImageCollection("projects/servir-mekong/UMD/tree_canopy");
  
// import tree canopy cover data
var tcc2000 = tcc1.filterDate("2000-1-1","2000-12-1").first().clip(kh);
var tcc2020 = tcc1.filterDate("2020-1-1","2020-12-1").first().clip(kh);
 
// add tcc to the map
Map.addLayer(tcc2000,{min:0,max:100,palette:"white,green,darkgreen"},"tree canopy cover 2000");
Map.addLayer(tcc2020,{min:0,max:100,palette:"white,green,darkgreen"},"tree canopy cover 2020");


// use 10% as a threshold for forest
var forest2000  = tcc2000.gt(10);
var forest2020  = tcc2020.gt(10);
  
// add forest layer to the map
Map.addLayer(forest2000,{min:0,max:1,palette:"white,darkgreen"},"Forest 2000");
Map.addLayer(forest2020,{min:0,max:1,palette:"white,darkgreen"},"Forest 2020")



var forestLoss = forest2000.and(forest2020.eq(0))
Map.addLayer(forestLoss,{min:0,max:1,palette:"white,red"},"forest loss");




var calcForest = function(img){
  var forest = img.gt(10).set("system:time_start",img.get("system:time_start"));
  return forest};
 
var forest = tcc.map(calcForest);





// Define the chart and print it to the console.
var chart =
    ui.Chart.image
        .series({
          imageCollection: forest,
          region: kh,
          reducer: ee.Reducer.sum(),
          scale: 300,
          xProperty: 'system:time_start'
        })
        .setSeriesNames(['forest'])
        .setOptions({
          title: 'Date',
          hAxis: {title: 'Date', titleTextStyle: {italic: false, bold: true}},
          vAxis: {
            title: 'forest pixel area',
            titleTextStyle: {italic: false, bold: true}
          },
          lineWidth: 5,
          colors: ['e37d05'],
          curveType: 'function'
        });
           
print(chart);





/*
// define the provinces of interest 
var provinces = ee.FeatureCollection("projects/servir-mekong/admin/KHM_adm1");
  
var chart =
    ui.Chart.image.byRegion
        ({
          image:forest2000,
          regions: provinces,
          reducer: ee.Reducer.sum(),
          scale: 100,
          xProperty: 'NAME_1'
        })
        .setSeriesNames(['loss area'])
        .setChartType('ColumnChart')
        .setOptions({
          title: 'forest loss',
          hAxis: {title: 'Date', titleTextStyle: {italic: false, bold: true}},
          vAxis: {
            title: 'area loss (ha)',
            titleTextStyle: {italic: false, bold: true}
          },
          lineWidth: 5,
          colors: ['red'],
          curveType: 'function'
        });
           
print(chart);

*/
